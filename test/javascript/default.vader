Before:
  Save b:graphql_javascript_functions
  Save b:graphql_javascript_tags

  setlocal shiftwidth=2
  source ../after/indent/javascript.vim
  source ../after/syntax/javascript/graphql.vim

After:
  Restore

Given javascript (Template):
  const query = gql`
    {
      user(id: ${uid}) {
        firstName
        lastName
      }
    }
  `;

Execute (Syntax assertions):
  AssertEqual 'javascript', b:current_syntax
  AssertEqual 'graphqlTaggedTemplate', SyntaxOf('gql')
  AssertEqual 'graphqlTemplateExpression', SyntaxOf('${uid}')
  AssertEqual 'graphqlName', SyntaxOf('user')

Execute (Indent assertions):
  Assert exists('*GetGraphQLIndent')
  Assert exists('*GetJavascriptGraphQLIndent')

Do (re-indent buffer):
  gg=G

Expect (propertly indented):
  const query = gql`
    {
      user(id: ${uid}) {
        firstName
        lastName
      }
    }
  `;

Given javascript (Template literal with `# gql` comment):
  const query = `# gql
    {
      user(id: ${uid}) {
        firstName
        lastName
      }
    }
  `;

Execute (Syntax assertions):
  AssertEqual 'javascript', b:current_syntax
  AssertEqual 'graphqlName', SyntaxOf('user')

Given javascript (Template literal with `# graphql` comment):
  const query = `# graphql
    {
      user(id: ${uid}) {
        firstName
        lastName
      }
    }
  `;

Execute (Syntax assertions):
  AssertEqual 'javascript', b:current_syntax
  AssertEqual 'graphqlName', SyntaxOf('user')

Given javascript (Template literal with a graphql() function):
  const query = graphql(`
    {
      user(id: ${uid}) {
        firstName
        lastName
      }
    }
  `);

Execute (Syntax assertions):
  AssertEqual 'javascript', b:current_syntax
  AssertEqual 'graphqlTemplateExpression', SyntaxOf('${uid}')
  AssertEqual 'graphqlName', SyntaxOf('user')

Given javascript (Template literal):
  const s = `text`;

Execute (Untagged template literals aren't matched ):
  AssertNotEqual 'graphqlTemplateString', SyntaxOf('`')

Given javascript (Custom function):
  const query = gql(`
    {
      user(id: ${uid}) {
        firstName
        lastName
      }
    }
  `);

Execute (Function names can be customized):
  let b:graphql_javascript_functions = ['gql']
  source ../after/syntax/javascript/graphql.vim
  AssertEqual 'javascript', b:current_syntax
  AssertEqual 'graphqlName', SyntaxOf('user')

Given javascript (Custom tag):
  const query = GraphQL.Tag`{}`;

Execute (Tag names can be customized):
  let b:graphql_javascript_tags = ['GraphQL.Tag']
  source ../after/syntax/javascript/graphql.vim
  AssertEqual 'graphqlTaggedTemplate', SyntaxOf('GraphQL.Tag')
